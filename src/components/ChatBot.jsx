// import avatar from "../assets/avatar.jpg";
import robot_img from "../assets/robot_image.png";
import { useState, useRef, useEffect } from "react";
import ScaleLoader from "react-spinners/ScaleLoader";
import { TypeAnimation } from "react-type-animation";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faMessage } from "@fortawesome/free-regular-svg-icons";
function ChatBot(props) {
  const messagesEndRef = useRef(null);
  const [timeOfRequest, SetTimeOfRequest] = useState(0);
  let [promptInput, SetPromptInput] = useState("");
  let [chatHistory, SetChatHistory] = useState([]);

  const commonQuestions = [
    "Vui l√≤ng cho bi·∫øt lo·∫°i H·ª£p ƒë·ªìng n√†o th√¨ kh√¥ng b·∫Øt bu·ªôc tham gia BHXH, BHYT, BHTN?",
    "T·ª´ ng√†y 01/01/2016, m·ª©c ƒë√≥ng BHXH b·∫±ng t·ªïng l∆∞∆°ng v√† ph·ª• c·∫•p. Nh·ªØng ph·ª• c·∫•p n√†o b·∫Øt bu·ªôc ph·∫£i ƒë√≥ng BHXH?",
    "NƒÉm 2016 doanh nghi·ªáp ph·∫£i tr√≠ch n·ªôp c√°c lo·∫°i b·∫£o hi·ªÉm tr√™n m·ª©c l∆∞∆°ng n√†o?",
    "V·ªÅ n·ªôp BHYT c·ªßa ng∆∞·ªùi lao ƒë·ªông n∆∞·ªõc ngo√†i, c√°c vƒÉn b·∫£n ph√°p lu·∫≠t quy ƒë·ªãnh c·ª• th·ªÉ nh∆∞ th·∫ø n√†o?",
    "Ng∆∞·ªùi lao ƒë·ªông l√†m vi·ªác 4 ti·∫øng 1 ng√†y th√¨ t√≠nh l∆∞∆°ng nh∆∞ th·∫ø n√†o?",
    "V·ªÅ gia h·∫°n th·ªùi h·∫°n h·ª£p ƒë·ªìng lao ƒë·ªông b·∫±ng ph·ª• l·ª•c, quy ƒë·ªãnh nh∆∞ th·∫ø n√†o?",
    "V·ªÅ cung c·∫•p th√¥ng tin ƒë√≥ng BH c·ªßa NLƒê tr√™n web c·ªßa CQ BH (m·∫´u C13-TS)?",
    "V·ªÅ v·∫•n ƒë·ªÅ gi·∫•y ph√©p lao ƒë·ªông cho ng∆∞·ªùi n∆∞·ªõc ngo√†i?",
    "V·ªÅ tr√°ch nhi·ªám tr·∫£ tr·ª£ c·∫•p th√¥i vi·ªác cho ng∆∞·ªùi lao ƒë·ªông trong th·ªùi gian ngh·ªâ thai s·∫£n?",
    "ƒê·ªëi v·ªõi th·ªùi gian ng∆∞·ªùi lao ƒë·ªông quay l·∫°i l√†m vi·ªác tr∆∞·ªõc khi k·∫øt th√∫c 6 th√°ng thai s·∫£n?",
    "Hi·ªán nay, c√≥ nhi·ªÅu doanh nghi·ªáp k√Ω h·ª£p ƒë·ªìng d·ªãch v·ª• thay cho h·ª£p ƒë·ªìng lao ƒë·ªông ƒë·ªëi v·ªõi c√° nh√¢n, c√≥ ƒë√∫ng kh√¥ng?",
    "Ng∆∞·ªùi lao ƒë·ªông tham gia BHXH ƒë√£ ƒë∆∞·ª£c 10 nƒÉm, c√≥ th·ªÉ b·ªè th·ªùi gian tham gia BHXH 2 nƒÉm ƒë·∫ßu kh√¥ng?"
  ]
  let [isLoading, SetIsLoad] = useState(false);
  let [isGen, SetIsGen] = useState(false);
  const [dataChat, SetDataChat] = useState([
    [
      "start",
      [
        "Xin ch√†o! ƒê√¢y l√† 662Chatbot, tr·ª£ l√Ω ·∫£o chuy√™n cung c·∫•p th√¥ng tin v·ªÅ b·∫£o hi·ªÉm x√£ h·ªôi v√† ph√°p lu·∫≠t! B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ v·∫•n ƒë·ªÅ g√¨? H√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ m√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm th√¥ng tin ch√≠nh x√°c nh·∫•t nh√©. üòÑ",
        null,
      ],
    ],
  ]);
  useEffect(() => {
    ScrollToEndChat();
  }, [isLoading]);
  useEffect(() => {
    const interval = setInterval(() => {
      SetTimeOfRequest((timeOfRequest) => timeOfRequest + 1);
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  function ScrollToEndChat() {
    messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
  }
  const onChangeHandler = (event) => {
    SetPromptInput(event.target.value);
  };

  const SendMessageChat = async () => {
    if (promptInput.trim() === "") return;

    SetIsLoad(true);
    SetTimeOfRequest(0);
    SetDataChat([...dataChat, ["user", [promptInput, null]]]);
    SetPromptInput("");

    try {
      const response = await fetch(`https://662chatbot.fumi.fyi/rag?q=${promptInput}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const result = await response.json();
      // SetChatHistory(result.chat_history);
      SetDataChat([...dataChat, ["user", [promptInput, null]], ["bot", [result.result, null]]]);

    } catch (error) {
      console.error("Error:", error);
      SetDataChat([
        ...dataChat,
        ["user", [promptInput, null]],
        ["bot", ["Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", null]],
      ]);
    }

    SetIsLoad(false);
  };

  const handleKeyDown = (event) => {
    if (event.key === "Enter") {
      SendMessageChat();
    }
  };
  let [reference, SetReference] = useState({
    title: "",
    source: "",
    url: "",
    text: ``,
  });
  
    <div className="bg-gradient-to-r from-blue-50 to-purple-100 h-[85vh] ">
      <div className="hidden lg:block  drawer-side absolute w-64 h-[20vh] left-3 mt-2 drop-shadow-md">
      </div>
      <div className="hidden lg:block  drawer-side absolute w-64 h-[20vh] mt-2 right-3 drop-shadow-md">
        <div
          className="menu p-4 w-full min-h-full bg-gray-50 text-base-content 
        rounded-2xl mt-3  overflow-auto scroll-y-auto max-h-[80vh]
        scrollbar-thin scrollbar-thumb-gray-300 
          scrollbar-thumb-rounded-full scrollbar-track-rounded-full
        "
        >
          {/* Sidebar content here */}
          <ul className="menu text-sm">
            <h2 className="font-bold mb-2 bg-[linear-gradient(90deg,hsl(var(--s))_0%,hsl(var(--sf))_9%,hsl(var(--pf))_42%,hsl(var(--p))_47%,hsl(var(--a))_100%)] bg-clip-text will-change-auto [-webkit-text-fill-color:transparent] [transform:translate3d(0,0,0)] motion-reduce:!tracking-normal max-[1280px]:!tracking-normal [@supports(color:oklch(0_0_0))]:bg-[linear-gradient(90deg,hsl(var(--s))_4%,color-mix(in_oklch,hsl(var(--sf)),hsl(var(--pf)))_22%,hsl(var(--p))_45%,color-mix(in_oklch,hsl(var(--p)),hsl(var(--a)))_67%,hsl(var(--a))_100.2%)] ">
              Nh·ªØng c√¢u h·ªèi ph·ªï bi·∫øn
            </h2>

            {commonQuestions.map((mess, i) => (
              <li key={i} onClick={() => SetPromptInput(mess)}>
                <p className="max-w-64">
                  <FontAwesomeIcon icon={faMessage} />
                  {mess}
                </p>
              </li>
            ))}
          </ul>
        </div>
      </div>

      <div className={"flex justify-center h-[80vh]"}>
        {/* Put this part before </body> tag */}
        <input type="checkbox" id="my_modal_6" className="modal-toggle" />
        <div className="modal">
          <div className="modal-box">
            <h3 className="font-bold text-lg">{reference.title}</h3>{" "}
            <p className="font-normal text-sm">Ngu·ªìn: {reference.source}</p>
            <p className="py-4 text-sm">
              {reference.text.slice(0, 700) + "..."}
            </p>
            <p className="link link-primary truncate">
              <a href={reference.url} target="_blank">
                {reference.url}
              </a>
            </p>
            <div className="modal-action">
              <label htmlFor="my_modal_6" className="btn btn-error">
                ƒê√ìNG
              </label>
            </div>
          </div>
        </div>

        <div
          id="chat-area"
          className="
          mt-5 text-sm 
          scrollbar-thin scrollbar-thumb-gray-300 bg-white  
          scrollbar-thumb-rounded-full scrollbar-track-rounded-full
          rounded-3xl border-2 md:w-[50%] md:p-3 p-1  w-full overflow-auto scroll-y-auto h-[90%] "
        >
          {dataChat.map((dataMessages, i) =>
            dataMessages[0] === "start" || dataMessages[0] === "bot" ? (
              <div className="chat chat-start drop-shadow-md" key={i}>
                <div className="chat-image avatar">
                  <div className="w-10 rounded-full border-2 border-blue-500">
                    <img className="scale-150" src={robot_img} />
                  </div>
                </div>
                <div className="chat-bubble chat-bubble-info colo break-words ">
                  <TypeAnimation
                    style={{ whiteSpace: 'pre-line' }}
                    sequence={[
                      dataMessages[1][0],
                      () => SetIsGen(false),
                    ]}
                    cursor={false}
                    speed={100}
                  />
                </div>
              </div>
            ) : (
              <div className="chat chat-end">
                <div className="chat-bubble shadow-xl chat-bubble-primary bg-gradient-to-r from-purple-500 to-blue-500 text-white">
                  {dataMessages[1][0]}
                </div>
              </div>
            )
          )}
          {isLoading ? (
            <div className="chat chat-start">
              <div className="chat-image avatar">
                <div className="w-10 rounded-full border-2 border-blue-500">
                  <img src={robot_img} />
                </div>
              </div>
              <div className="chat-bubble chat-bubble-info">
                <ScaleLoader
                  color="#000000"
                  loading={true}
                  height={10}
                  width={10}
                  aria-label="Loading Spinner"
                  data-testid="loader"
                />
                {/* <p className="text-xs font-medium">{timeOfRequest + "/60s"}</p> */}
              </div>
            </div>
          ) : (
            ""
          )}
          <div ref={messagesEndRef} />
          <div className="absolute bottom-[0.2rem] md:w-[50%] grid ">
            <input
              type="text"
              placeholder="Nh·∫≠p c√¢u h·ªèi t·∫°i ƒë√¢y..."
              className="mr-1 shadow-xl border-2 focus:outline-none px-2 rounded-2xl input-primary col-start-1 md:col-end-12 col-end-11 "
              onChange={onChangeHandler}
              onKeyDown={handleKeyDown}
              disabled={isGen}
              value={promptInput}
            />

            <button
              disabled={isGen}
              onClick={() => SendMessageChat()}
              className={
                " drop-shadow-md md:col-start-12 rounded-2xl col-start-11 col-end-12 md:col-end-13 btn btn-active btn-primary btn-square bg-gradient-to-tl from-transparent via-blue-600 to-indigo-500"
              }
            >
              <svg
                stroke="currentColor"
                fill="none"
                strokeWidth="2"
                viewBox="0 0 24 24"
                color="white"
                height="15px"
                width="15px"
                xmlns="http://www.w3.org/2000/svg"
              >
                <line x1="22" y1="2" x2="11" y2="13"></line>
                <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
              </svg>
            </button>
            <p className=" text-xs col-start-1 col-end-12 text-justify p-1">
              <b>L∆∞u √Ω: </b>M√¥ h√¨nh c√≥ th·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi kh√¥ng ch√≠nh x√°c ·ªü
              m·ªôt s·ªë tr∆∞·ªùng h·ª£p, v√¨ v·∫≠y h√£y lu√¥n ki·ªÉm ch·ª©ng th√¥ng tin b·∫°n nh√©!
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
export default ChatBot;
